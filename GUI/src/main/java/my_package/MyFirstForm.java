/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package my_package;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Njabulo
 */
public class MyFirstForm extends JFrame {
    
    
    private Connection connect() {
        Connection conn = null;
        try {
            
            // db parameters
            String url = "jdbc:mysql://localhost:3306/mysql?zeroDateTimeBehavior=CONVERT_TO_NULL"; // Update with your database name
            String user = "root"; // Update with your MySQL username
            String password = "200312Njabulo"; // Update with your MySQL password

            // create a connection to the database
            conn = DriverManager.getConnection(url, user, password);
            System.out.println("Database connected successfully!");
            
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        return conn;
    }

    private List<Employee> employeeList;
    private DefaultTableModel tableModel;
    /**
     * Creates new form MyFirstForm
     */
    public MyFirstForm() {
        initComponents();
        employeeList = new ArrayList<>();
        tableModel = (DefaultTableModel) jTable1.getModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new JLabel();
        jLabel2 = new JLabel();
        jLabel3 = new JLabel();
        jLabel4 = new JLabel();
        jLabel5 = new JLabel();
        jLabel6 = new JLabel();
        iDNum = new JTextField();
        name = new JTextField();
        phoneNum = new JTextField();
        email = new JTextField();
        department = new JTextField();
        position = new JTextField();
        add = new JButton();
        view = new JButton();
        search = new JButton();
        delete = new JButton();
        jScrollPane1 = new JScrollPane();
        jTable1 = new JTable();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("ID:");

        jLabel2.setText("Name:");

        jLabel3.setText("Mobile:");

        jLabel4.setText("Email:");

        jLabel5.setText("Department:");

        jLabel6.setText("Position:");

        iDNum.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                iDNumActionPerformed(evt);
            }
        });

        name.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                nameActionPerformed(evt);
            }
        });

        phoneNum.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                phoneNumActionPerformed(evt);
            }
        });

        email.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                emailActionPerformed(evt);
            }
        });

        department.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                departmentActionPerformed(evt);
            }
        });

        position.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                positionActionPerformed(evt);
            }
        });

        add.setText("Add");
        add.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        view.setText("View");
        view.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                viewActionPerformed(evt);
            }
        });

        search.setText("Search");
        search.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        delete.setText("Delete");
        delete.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        jTable1.setModel(new DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Mobile", "Email", "Department", "Position"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel5, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(search, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                    .addComponent(add, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                    .addComponent(department, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                    .addComponent(email, GroupLayout.Alignment.LEADING)
                    .addComponent(phoneNum, GroupLayout.Alignment.LEADING)
                    .addComponent(name, GroupLayout.Alignment.LEADING)
                    .addComponent(view, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(delete, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(iDNum, GroupLayout.Alignment.LEADING)
                    .addComponent(position))
                .addContainerGap(468, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 707, GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(iDNum, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(name, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(phoneNum, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(email, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(department, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(position, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(add)
                    .addComponent(view))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(search)
                    .addComponent(delete))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
        
        
   
    private void clearFields() {
        iDNum.setText("");
        name.setText("");
        phoneNum.setText("");
        email.setText("");
        department.setText("");
        position.setText(""); //To change body of generated methods, choose Tools | Templates.
    }
    public class Employee {
        String iDNum;
        String name;
        String phoneNum;
        String email;
        String department;
        String position;

        public Employee(String iDNum, String name, String phoneNum, String email, String department, String position) {
            this.iDNum = iDNum;
            this.name = name;
            this.phoneNum = phoneNum;
            this.email = email;
            this.department = department;
            this.position = position; //To change body of generated methods, choose Tools | Templates.
        }
        public String getId() {
        return iDNum;
    }
    
   

    }

    private boolean uniqueID(String id) {
      
    for (Employee employee : employeeList) {
        if (employee.getId().equals(id)) {
            return false;
        }
    }
    return true;
}
    private void addActionPerformed(ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        // TODO add your handling code here:
          String id = iDNum.getText();
    if (uniqueID(id)) {
        Employee employee = new Employee(
            iDNum.getText(),
            name.getText(),
            phoneNum.getText(),
            email.getText(),
            department.getText(),
            position.getText()
        );
        employeeList.add(employee);
        
        String sql = "INSERT INTO employeemanagmentsys(id, name, phone, email, department, position) VALUES(?, ?, ?, ?, ?, ?)";

        try (Connection conn = connect();
                PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, Integer.parseInt(employee.iDNum));
            pstmt.setString(2, employee.name);
            pstmt.setString(3, employee.phoneNum);
            pstmt.setString(4, employee.email);
            pstmt.setString(5, employee.department);
            pstmt.setString(6, employee.position);
            pstmt.executeUpdate();

            tableModel.addRow(new Object[]{
                employee.iDNum,
                employee.name,
                employee.phoneNum,
                employee.email,
                employee.department,
                employee.position
            });

            JOptionPane.showMessageDialog(null, "Employee added successfully!", "Confirmation", JOptionPane.INFORMATION_MESSAGE);
            clearFields();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error adding employee to database.", "Database Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    } else {
        JOptionPane.showMessageDialog(null, "Employee ID must be unique. This ID already exists.", "Validation Error", JOptionPane.ERROR_MESSAGE);
    }
        
    }//GEN-LAST:event_addActionPerformed

    private void iDNumActionPerformed(ActionEvent evt) {//GEN-FIRST:event_iDNumActionPerformed
        // TODO add your handling code here:
        String id = iDNum.getText();
        if (id.isEmpty()){
            JOptionPane.showMessageDialog(null, "All fileds must be filled", "Error" ,JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_iDNumActionPerformed

    private void nameActionPerformed(ActionEvent evt) {//GEN-FIRST:event_nameActionPerformed
        // TODO add your handling code here:
        String nameA = name.getText();
        if (nameA.isEmpty()){
            JOptionPane.showMessageDialog(null, "All fileds must be filled", "Error" ,JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_nameActionPerformed

    private void phoneNumActionPerformed(ActionEvent evt) {//GEN-FIRST:event_phoneNumActionPerformed
        // TODO add your handling code here:
        String mobile = phoneNum.getText();
        if (mobile.isEmpty()){
            JOptionPane.showMessageDialog(null, "All fileds must be filled", "Error" ,JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_phoneNumActionPerformed

    private void emailActionPerformed(ActionEvent evt) {//GEN-FIRST:event_emailActionPerformed
        // TODO add your handling code here:
        String emailA = email.getText();
        if (emailA.isEmpty()){
            JOptionPane.showMessageDialog(null, "All fileds must be filled", "Error" ,JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_emailActionPerformed

    private void departmentActionPerformed(ActionEvent evt) {//GEN-FIRST:event_departmentActionPerformed
        // TODO add your handling code here:
        String departmentA = department.getText();
        if (departmentA.isEmpty()){
            JOptionPane.showMessageDialog(null, "All fileds must be filled", "Error" ,JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_departmentActionPerformed

    private void positionActionPerformed(ActionEvent evt) {//GEN-FIRST:event_positionActionPerformed
        // TODO add your handling code here:
        String positionA = position.getText();
        if (positionA.isEmpty()){
            JOptionPane.showMessageDialog(null, "All fileds must be filled", "Error" ,JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_positionActionPerformed

    private void deleteActionPerformed(ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        // TODO add your handling code here:
        String deleteIdnum = JOptionPane.showInputDialog("Enter ID that needs to be deleted:");

    if (deleteIdnum != null && !deleteIdnum.trim().isEmpty()) {
        String sql = "DELETE FROM employees WHERE id = ?";

        try (Connection conn = connect();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, Integer.parseInt(deleteIdnum));
            int affectedRows = pstmt.executeUpdate();

            if (affectedRows > 0) {
                // Also remove from the employeeList
                employeeList.removeIf(employee -> employee.getId().equals(deleteIdnum));
                updateTable();
                JOptionPane.showMessageDialog(null, "Employee with ID: " + deleteIdnum + " has been deleted.", "Deleted", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "No employee found with ID: " + deleteIdnum, "Not Found", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error deleting employee from database.", "Database Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    } else {
        JOptionPane.showMessageDialog(null, "Please enter a valid ID to delete.", "Invalid Input", JOptionPane.WARNING_MESSAGE);
    }
}

// Method to update the jTable1 after deletion
private void updateTable() {
    DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
    tableModel.setRowCount(0); // Clear the table
    
    // Re-populate the table with remaining employees
    for (Employee employee : employeeList) {
        tableModel.addRow(new Object[]{
            employee.iDNum,
            employee.name,
            employee.phoneNum,
            employee.email,
            employee.department,
            employee.position
        });
    } 
    }//GEN-LAST:event_deleteActionPerformed

    private void viewActionPerformed(ActionEvent evt) {//GEN-FIRST:event_viewActionPerformed
        // TODO add your handling code here:
       String sql = "SELECT * FROM employeemanagmentsys";

    try (Connection conn = connect();
         Statement stmt = conn.createStatement();
         ResultSet rs = stmt.executeQuery(sql)) {

        DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
        tableModel.setRowCount(0); // Clear the table first

        while (rs.next()) {
            tableModel.addRow(new Object[]{
                rs.getInt("id"),
                rs.getString("name"),
                rs.getString("phone"),
                rs.getString("email"),
                rs.getString("department"),
                rs.getString("position")
            });
        }

        TableRowSorter<TableModel> sorter = new TableRowSorter<>(tableModel);
        jTable1.setRowSorter(sorter);

        List<RowSorter.SortKey> sortKeys = new ArrayList<>();
        sortKeys.add(new RowSorter.SortKey(1, SortOrder.ASCENDING)); // Sort by Name
        sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));

        sorter.setSortKeys(sortKeys);

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error retrieving employees from database.", "Database Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
    }//GEN-LAST:event_viewActionPerformed

    private void searchActionPerformed(ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        // TODO add your handling code here:
       String searchIdnum = JOptionPane.showInputDialog("Enter ID to search: ");

    if (searchIdnum != null && !searchIdnum.trim().isEmpty()) {
        String sql = "SELECT * FROM employeemanagmentsys WHERE id = ?";

        try (Connection conn = connect();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, Integer.parseInt(searchIdnum));
            ResultSet rs = pstmt.executeQuery();

            DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
            tableModel.setRowCount(0); // Clear the table first

            if (rs.next()) {
                tableModel.addRow(new Object[]{
                    rs.getInt("id"),
                    rs.getString("name"),
                    rs.getString("phone"),
                    rs.getString("email"),
                    rs.getString("department"),
                    rs.getString("position")
                });
            } else {
                JOptionPane.showMessageDialog(null, "No employee found with ID: " + searchIdnum, "Not Found", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error searching employee in database.", "Database Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    } else {
        JOptionPane.showMessageDialog(null, "Please enter a valid ID to search.", "Invalid Input", JOptionPane.WARNING_MESSAGE);
    }
    }//GEN-LAST:event_searchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MyFirstForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(MyFirstForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(MyFirstForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(MyFirstForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MyFirstForm().setVisible(true);
                
                
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton add;
    private JButton delete;
    private JTextField department;
    private JTextField email;
    private JTextField iDNum;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JLabel jLabel4;
    private JLabel jLabel5;
    private JLabel jLabel6;
    private JScrollPane jScrollPane1;
    private JTable jTable1;
    private JTextField name;
    private JTextField phoneNum;
    private JTextField position;
    private JButton search;
    private JButton view;
    // End of variables declaration//GEN-END:variables
}
